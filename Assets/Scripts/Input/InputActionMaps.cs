//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/InputActionMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionMaps : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionMaps"",
    ""maps"": [
        {
            ""name"": ""Map"",
            ""id"": ""baadbc45-9967-4bc6-b27b-dfcb4ac2014f"",
            ""actions"": [
                {
                    ""name"": ""MovementVector2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5a948178-9f27-47d3-9e6a-52d66b166a21"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""10471213-ea4f-4355-9149-5f7756085b31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""870ee2e2-b1a4-4321-b26c-ec5413677aaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraDelta"",
                    ""type"": ""Value"",
                    ""id"": ""abbf3046-4ee4-47e3-85cd-f8a43829afc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyboardWASD"",
                    ""id"": ""62a71715-2867-4ad6-9e9c-c611a68b0562"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementVector2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83e11d43-ce96-4bb9-b5d3-7a23015430c3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementVector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bc30de85-0ab0-44ef-bc28-6dd2baace6e9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementVector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""797fce06-e10b-47dc-98ce-830a62f59186"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementVector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6c41f02-0de5-4e50-871b-66b8d1d42776"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementVector2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""32b3b2e6-ee30-4a16-814d-c7f57b20b1e1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6708a29b-315c-4b18-ac77-d60c62487401"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""329191de-f64a-474d-978d-f3b92fe08e7c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_MovementVector2 = m_Map.FindAction("MovementVector2", throwIfNotFound: true);
        m_Map_Jump = m_Map.FindAction("Jump", throwIfNotFound: true);
        m_Map_Shoot = m_Map.FindAction("Shoot", throwIfNotFound: true);
        m_Map_CameraDelta = m_Map.FindAction("CameraDelta", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_MovementVector2;
    private readonly InputAction m_Map_Jump;
    private readonly InputAction m_Map_Shoot;
    private readonly InputAction m_Map_CameraDelta;
    public struct MapActions
    {
        private @InputActionMaps m_Wrapper;
        public MapActions(@InputActionMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementVector2 => m_Wrapper.m_Map_MovementVector2;
        public InputAction @Jump => m_Wrapper.m_Map_Jump;
        public InputAction @Shoot => m_Wrapper.m_Map_Shoot;
        public InputAction @CameraDelta => m_Wrapper.m_Map_CameraDelta;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @MovementVector2.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMovementVector2;
                @MovementVector2.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMovementVector2;
                @MovementVector2.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMovementVector2;
                @Jump.started -= m_Wrapper.m_MapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnJump;
                @Shoot.started -= m_Wrapper.m_MapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnShoot;
                @CameraDelta.started -= m_Wrapper.m_MapActionsCallbackInterface.OnCameraDelta;
                @CameraDelta.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnCameraDelta;
                @CameraDelta.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnCameraDelta;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovementVector2.started += instance.OnMovementVector2;
                @MovementVector2.performed += instance.OnMovementVector2;
                @MovementVector2.canceled += instance.OnMovementVector2;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @CameraDelta.started += instance.OnCameraDelta;
                @CameraDelta.performed += instance.OnCameraDelta;
                @CameraDelta.canceled += instance.OnCameraDelta;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IMapActions
    {
        void OnMovementVector2(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnCameraDelta(InputAction.CallbackContext context);
    }
}
